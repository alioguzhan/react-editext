{"version":3,"file":"index.min.js","sources":["../src/utils.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/index.tsx"],"sourcesContent":["export function classnames(...args: any[]) {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n   */\n  return Array(...args)\n    .filter((a) => a)\n    .join(' ');\n}\n\nexport const dataAttributes = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  mainContainer: 'main-container',\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint',\n};\n\nexport const cancelOnConflictMessage =\n  'EdiText: Both `cancelOnUnfocus` and `submitOnUnfocus` are set to true. ' +\n  '`submitOnUnfocus` is ignored in this case. Please remove one of these.';\n\nexport const defaultValidationMessage = 'Invalid Value';\n\nexport function getCanEdit(\n  canEdit: boolean | (() => boolean) | undefined\n): boolean {\n  if (canEdit === undefined) {\n    return true;\n  }\n  return typeof canEdit === 'function' ? canEdit() : canEdit;\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, {\n  useEffect,\n  KeyboardEvent,\n  FocusEvent,\n  useState,\n  ChangeEvent,\n} from 'react';\nimport styles from './styles.module.css';\nimport {\n  cancelOnConflictMessage,\n  dataAttributes,\n  classnames,\n  defaultValidationMessage,\n  getCanEdit,\n} from './utils';\n\nexport type EdiTextType =\n  | 'text'\n  | 'textarea'\n  | 'email'\n  | 'number'\n  | 'date'\n  | 'datetime-local'\n  | 'time'\n  | 'month'\n  | 'url'\n  | 'week'\n  | 'tel';\n\nexport type ButtonsAlignment = 'after' | 'before';\n\nexport type InputProps =\n  | React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >\n  | React.DetailedHTMLProps<\n      React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n      HTMLTextAreaElement\n    >;\nexport interface EdiTextProps {\n  /**\n   * Props to be passed to input element.\n   * Any kind of valid DOM attributes are welcome\n   */\n  inputProps?: InputProps;\n  /**\n   * Props to be passed to div element that shows the text.\n   * You can specify your own `styles` or `className`\n   */\n  viewProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Props to be passed to edit button.\n   * You can set `styles`, `className or disabled state.\n   */\n  editButtonProps?: React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  /**\n   * Class name for the root container of the EdiText.\n   */\n  className?: string;\n  /**\n   * Props to be passed to div element that is container for all elements.\n   * You can use this if you want to style or select the whole container.\n   */\n  containerProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Value of the content [in view mode] and input [in edit mode]\n   */\n  value: string;\n  /**\n   * A simple hint message appears at the bottom of input element.\n   * Any valid element is allowed.\n   */\n  hint?: React.ReactNode;\n  /**\n   * If validation fails this message will appear\n   */\n  validationMessage?: any;\n  /** Pass your own validation function.\n   * takes one param -> `value`.\n   * It must return `true` or `false`\n   */\n  validation?: (...args: string[]) => boolean;\n  /**\n   * will be called when validation fails.\n   * takes one param <value> which is the current value of input\n   */\n  onValidationFail?: (...args: string[]) => any;\n  /**\n   * Input type. Possible options are:\n   * `text`, `number`, `email`, `textarea`, `date`,\n   * `datetime-local`, `time`, `month`, `url`, `week`, `tel`\n   * @default \"text\"\n   */\n  type?: EdiTextType;\n  /**\n   * will be called when user clicked cancel button\n   * @param value the current value of input when cancelled.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onCancel?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * will be called when user clicked save button.\n   * @param value the current value of input\n   * @param inputProps inputProps that passed to the element.\n   */\n  onSave: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Custom class name for SAVE button.\n   * */\n  saveButtonClassName?: string;\n  /**\n   * Custom class name for EDIT button.\n   * */\n  editButtonClassName?: string;\n  /**\n   * Custom class name for CANCEL button. */\n  cancelButtonClassName?: string;\n  /**\n   * Content for CANCEL button. Any valid element and node are allowed. */\n  cancelButtonContent?: any;\n  /**\n   * Content for SAVE button. Any valid element and node are allowed. */\n  saveButtonContent?: any;\n  /**\n   * Content for EDIT button. Any valid element and node are allowed. */\n  editButtonContent?: any;\n  /**\n   * Set it to `true` if you don't want to see default icons\n   * on action buttons.See Examples page for more details.\n   * @default \"false\"\n   */\n  hideIcons?: boolean;\n  /**\n   * Decides whether buttons will be located _BEFORE_ or _AFTER_\n   * the input element.\n   * @default \"after\"\n   */\n  buttonsAlign?: ButtonsAlignment;\n  /**\n   * Custom class name for the container in view mode.\n   */\n  viewContainerClassName?: string;\n  /**\n   * Custom class name for the container in edit mode.\n   * Will be set to viewContainerClassName if you set it and omit this.\n   */\n  editContainerClassName?: string;\n  /**\n   * Custom class name for the top-level main container.\n   * @deprecated please use `containerProps` instead of this\n   */\n  mainContainerClassName?: string;\n  /**\n   * Set it to `true` if you want clicking on the view to activate the editor.\n   * @default false\n   */\n  editOnViewClick?: boolean;\n  /**\n   * Set it to `true` if you want the view state to be edit mode\n   * @default false\n   */\n  editing?: boolean;\n  /**\n   * control function that will be called when user clicks on the edit button.\n   * return false to prevent editing or return true to allow editing.\n   */\n  canEdit?: boolean | (() => boolean);\n  /**\n   * Will be called when the editing mode is active.\n   *\n   * @param value the value of the input at the time when editing started.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onEditingStart?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Set it to `true` if you want to display action buttons **only**\n   * when the text hovered by the user.\n   * @default false\n   */\n  showButtonsOnHover?: boolean;\n  /**\n   * Set it to `true` if you want to submit the form when `Enter`\n   * is pressed.\n   * @default false\n   */\n  submitOnEnter?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when `Escape`\n   * is pressed.\n   * @default false\n   */\n  cancelOnEscape?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when the input\n   * is unfocused.\n   * @default false\n   */\n  cancelOnUnfocus?: boolean;\n  /**\n   * Set it to `true` if you want to save the form when the input\n   * is unfocused.\n   * @default false\n   */\n  submitOnUnfocus?: boolean;\n  /**\n   * An helper shortcut in case you want to pass the same tabIndex to both\n   * `viewProps` and `inputProps`.\n   *\n   * NOTE: This will be overriden if you pass the tabIndex in `viewProps`\n   * or `inputProps`.\n   */\n  tabIndex?: number;\n  /**\n   * Activates the edit mode when the view container is in focus.\n   */\n  startEditingOnFocus?: boolean;\n  /**\n   * Activates the edit mode when the `Enter` key is pressed if the view\n   * container is focused.\n   *\n   * NOTE: This requires the element to be in focus.\n   */\n  startEditingOnEnter?: boolean;\n  /**\n   * Custom render method for the content in the view mode.\n   * Use this prop to customize the displayed value in view mode.\n   * The return value from this function will be rendered in view mode.\n   * You can return string or JSX. Both are allowed.\n   */\n  renderValue?: (value: any) => any;\n}\n\nfunction EdiText(props: EdiTextProps) {\n  // state\n  const [editingInternal, setEditingInternal] = useState(props.editing);\n  const [valid, setValid] = useState<boolean>(true);\n  const [valueInternal, setValueInternal] = useState<string>(props.value || '');\n  const [savedValue, setSavedValue] = useState<string | undefined>(undefined);\n  const [viewFocused, setViewFocused] = useState<boolean>(false);\n  // refs\n  const saveButton = React.createRef<HTMLButtonElement>();\n  const editingContainer = React.createRef<HTMLDivElement>();\n  const editingButtons = React.createRef<any>();\n\n  useEffect(() => {\n    if (props.cancelOnUnfocus && props.submitOnUnfocus) {\n      console.warn(cancelOnConflictMessage);\n    }\n  }, [props.cancelOnUnfocus, props.submitOnUnfocus]);\n\n  useEffect(() => {\n    if (props.value !== undefined) {\n      setValueInternal(props.value);\n      setSavedValue(props.value);\n    }\n\n    if (props.editing !== undefined) {\n      setEditingInternal(props.editing);\n    }\n  }, [props.editing, props.value]);\n\n  function handleKeyDown(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const isEscape = [27, 'Escape', 'Esc'].some(\n      (c) => e.code === c || e.key === c\n    );\n    if (isEnter) {\n      props.submitOnEnter && handleSave();\n      e?.preventDefault();\n    }\n    if (isEscape) {\n      props.cancelOnEscape && handleCancel();\n      e.preventDefault();\n    }\n    props.inputProps?.onKeyDown && props.inputProps.onKeyDown(e);\n  }\n\n  function handleOnBlur(e: FocusEvent<any>): void {\n    const isEditingButton = editingButtons.current?.contains(e?.relatedTarget);\n    props.cancelOnUnfocus && !isEditingButton && handleCancel();\n    props.submitOnUnfocus &&\n      !isEditingButton &&\n      !props.cancelOnUnfocus &&\n      handleSave();\n    props.inputProps?.onBlur && props.inputProps.onBlur(e);\n  }\n\n  function handleViewFocus(e: FocusEvent<HTMLDivElement>): void {\n    setViewFocused(true);\n    props.startEditingOnFocus && setEditingInternal(true);\n    props.viewProps?.onFocus && props.viewProps.onFocus(e);\n  }\n\n  function handleKeyDownForView(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const startEditing = isEnter && viewFocused && props.startEditingOnEnter;\n    startEditing && e.preventDefault();\n    startEditing && setEditingInternal(true);\n    props.viewProps?.onKeyDown && props.viewProps.onKeyDown(e);\n  }\n\n  function handleInputChange(\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    setValid(true);\n    setValueInternal(e.target.value);\n    props.inputProps?.onChange?.(e as any);\n  }\n\n  function handleCancel(): void {\n    const val = savedValue ?? props.value;\n    setValid(true);\n    setEditingInternal(false);\n    setValueInternal(val);\n    props.onCancel?.(val, props.inputProps);\n  }\n\n  function handleActivateEditMode(): void {\n    if (getCanEdit(props.canEdit)) {\n      setEditingInternal(true);\n      props.onEditingStart?.(valueInternal, props.inputProps);\n    }\n  }\n\n  function handleSave(): void {\n    if (typeof props.validation === 'function') {\n      const isValid = props.validation(valueInternal);\n      if (!isValid) {\n        setValid(false);\n        props.onValidationFail && props.onValidationFail(valueInternal);\n        return;\n      }\n    }\n    setEditingInternal(false);\n    setSavedValue(valueInternal);\n    props.onSave(valueInternal, props.inputProps);\n  }\n\n  function _renderInput() {\n    if (props.type === 'textarea') {\n      return (\n        <textarea\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...(props.inputProps as React.DetailedHTMLProps<\n            React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n            HTMLTextAreaElement\n          >)}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    } else {\n      return (\n        <input\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...props.inputProps}\n          onKeyDown={handleKeyDown}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          type={props.type || 'text'}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    }\n  }\n\n  function _renderEditingMode() {\n    const inputElem = _renderInput();\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const saveButtonClass =\n      props.saveButtonClassName || saveButtonDefaultClasses;\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const cancelButtonClass =\n      props.cancelButtonClassName || cancelButtonDefaultClasses;\n    let editContainerClass = styles.Editext__editing_container;\n    if (props.editContainerClassName)\n      editContainerClass = props.editContainerClassName;\n    if (props.viewContainerClassName)\n      editContainerClass = props.viewContainerClassName;\n\n    const alignment = props.buttonsAlign || 'after';\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      alignment === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      alignment === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    return (\n      <div>\n        <div\n          ref={editingContainer}\n          className={editContainerClass}\n          // @ts-ignore\n          editext={dataAttributes.editContainer}\n        >\n          {alignment === 'after' && inputElem}\n          <div className={buttonsContainerClass} ref={editingButtons}>\n            <button\n              ref={saveButton}\n              // @ts-ignore\n              editext={dataAttributes.saveButton}\n              type=\"button\"\n              className={saveButtonClass}\n              onClick={handleSave}\n            >\n              {props.saveButtonContent}\n            </button>\n            <button\n              type=\"button\"\n              // @ts-ignore\n              editext={dataAttributes.cancelButton}\n              className={cancelButtonClass}\n              onClick={handleCancel}\n            >\n              {props.cancelButtonContent}\n            </button>\n          </div>\n          {alignment === 'before' && inputElem}\n        </div>\n        {!valid && !props.onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {props.validationMessage || defaultValidationMessage}\n          </div>\n        )}\n        {props.hint && (\n          <div\n            className={styles.Editext__hint}\n            // @ts-ignore\n            editext={dataAttributes.hint}\n          >\n            {props.hint}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function _renderViewMode() {\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const editButtonClass =\n      props.editButtonClassName || editButtonDefaultClasses;\n    const viewContainerClass = classnames(\n      props.viewContainerClassName || styles.Editext__view_container,\n      props.showButtonsOnHover &&\n        `${styles.Editext__buttons_showButtonsOnHover}`\n    );\n    const alignment = props.buttonsAlign || 'after';\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      alignment === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      alignment === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    const viewClickHandler = props.editOnViewClick\n      ? handleActivateEditMode\n      : undefined;\n    const _value =\n      typeof props.renderValue === 'function'\n        ? props.renderValue(valueInternal)\n        : valueInternal;\n    return (\n      <div\n        className={viewContainerClass}\n        // @ts-ignore\n        editext={dataAttributes.viewContainer}\n      >\n        {alignment === 'after' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext=\"view\"\n          >\n            {_value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type=\"button\"\n            className={editButtonClass}\n            {...props.editButtonProps}\n            // @ts-ignore\n            editext={dataAttributes.editButton}\n            onClick={handleActivateEditMode}\n          >\n            {props.editButtonContent}\n          </button>\n        </div>\n        {alignment === 'before' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext={dataAttributes.viewContainer}\n          >\n            {_value}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const mode = editingInternal ? _renderEditingMode() : _renderViewMode();\n  const clsName = classnames(\n    props.containerProps?.className ||\n      props.mainContainerClassName ||\n      styles.Editext__main_container,\n    props.className\n  );\n  return (\n    <div\n      {...props.containerProps}\n      className={clsName}\n      // @ts-ignore\n      editext={dataAttributes.mainContainer}\n    >\n      {mode}\n    </div>\n  );\n}\n\nexport default EdiText;\n"],"names":["classnames","_i","args","Array","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","dataAttributes","props","_b","useState","editing","editingInternal","setEditingInternal","_c","valid","setValid","_d","value","valueInternal","setValueInternal","_e","undefined","savedValue","setSavedValue","_f","viewFocused","setViewFocused","saveButton","React","createRef","editingContainer","editingButtons","handleKeyDown","e","isEnter","some","c","key","code","isEscape","submitOnEnter","handleSave","preventDefault","cancelOnEscape","handleCancel","inputProps","onKeyDown","handleOnBlur","isEditingButton","current","contains","relatedTarget","cancelOnUnfocus","submitOnUnfocus","onBlur","handleViewFocus","startEditingOnFocus","viewProps","onFocus","handleKeyDownForView","startEditing","startEditingOnEnter","handleInputChange","target","onChange","val","onCancel","handleActivateEditMode","canEdit","onEditingStart","validation","onValidationFail","onSave","useEffect","console","warn","editButtonDefaultClasses","editButtonClass","viewContainerClass","alignment","buttonsContainerClass","viewClickHandler","_value","mode","inputElem","className","styles","editext","tabIndex","autoFocus","saveButtonDefaultClasses","hideIcons","saveButtonClass","saveButtonClassName","cancelButtonDefaultClasses","cancelButtonClass","cancelButtonClassName","editContainerClass","editContainerClassName","viewContainerClassName","buttonsAlign","onClick","saveButtonContent","cancelButtonContent","validationMessage","hint","_renderEditingMode","editButtonClassName","showButtonsOnHover","editOnViewClick","renderValue","editButtonProps","editButtonContent","clsName","containerProps","mainContainerClassName"],"mappings":"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"}