{"version":3,"file":"index.min.js","sources":["../src/utils.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/index.tsx"],"sourcesContent":["export function classnames(...args: any[]) {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n   */\n  return Array(...args)\n    .filter((a) => a)\n    .join(' ');\n}\n\nexport const dataAttributes = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint',\n};\n\nexport const cancelOnConflictMessage =\n  'EdiText: Both `cancelOnUnfocus` and `submitOnUnfocus` are set to true. ' +\n  '`submitOnUnfocus` is ignored in this case. Please remove one of these.';\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, {\n  useEffect,\n  KeyboardEvent,\n  FocusEvent,\n  useState,\n  ChangeEvent,\n} from 'react';\nimport styles from './styles.module.css';\nimport { cancelOnConflictMessage, dataAttributes, classnames } from './utils';\n\ntype EdiTextType =\n  | 'text'\n  | 'textarea'\n  | 'email'\n  | 'number'\n  | 'date'\n  | 'datetime-local'\n  | 'time'\n  | 'month'\n  | 'url'\n  | 'week'\n  | 'tel';\ntype ButtonsAlignment = 'after' | 'before';\n\ntype InputProps =\n  | React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >\n  | React.DetailedHTMLProps<\n      React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n      HTMLTextAreaElement\n    >;\ninterface EdiTextProps {\n  /**\n   * Props to be passed to input element.\n   * Any kind of valid DOM attributes are welcome\n   */\n  inputProps?: React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  /**\n   * Props to be passed to div element that shows the text.\n   * You can specify your own `styles` or `className`\n   */\n  viewProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Class name for the root container of the EdiText.\n   */\n  className?: string;\n  /**\n   * Value of the content [in view mode] and input [in edit mode]\n   */\n  value: string;\n  /**\n   * A simple hint message appears at the bottom of input element.\n   * Any valid element is allowed.\n   */\n  hint?: React.ReactNode;\n  /**\n   * If validation fails this message will appear\n   */\n  validationMessage?: any;\n  /** Pass your own validation function.\n   * takes one param -> `value`.\n   * It must return `true` or `false`\n   */\n  validation?: (...args: string[]) => boolean;\n  /**\n   * will be called when validation fails.\n   * takes one param <value> which is the current value of input\n   */\n  onValidationFail?: (...args: string[]) => any;\n  /**\n   * Input type. Possible options are:\n   * `text`, `number`, `email`, `textarea`, `date`,\n   * `datetime-local`, `time`, `month`, `url`, `week`, `tel`\n   * @default \"text\"\n   */\n  type?: EdiTextType;\n  /**\n   * will be called when user clicked cancel button\n   * @param value the current value of input when cancelled.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onCancel?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * will be called when user clicked save button.\n   * @param value the current value of input\n   * @param inputProps inputProps that passed to the element.\n   */\n  onSave: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Custom class name for SAVE button.\n   * */\n  saveButtonClassName?: string;\n  /**\n   * Custom class name for EDIT button.\n   * */\n  editButtonClassName?: string;\n  /**\n   * Custom class name for CANCEL button. */\n  cancelButtonClassName?: string;\n  /**\n   * Content for CANCEL button. Any valid element and node are allowed. */\n  cancelButtonContent?: any;\n  /**\n   * Content for SAVE button. Any valid element and node are allowed. */\n  saveButtonContent?: any;\n  /**\n   * Content for EDIT button. Any valid element and node are allowed. */\n  editButtonContent?: any;\n  /**\n   * Set it to `true` if you don't want to see default icons\n   * on action buttons.See Examples page for more details.\n   * @default \"false\"\n   */\n  hideIcons?: boolean;\n  /**\n   * Decides whether buttons will be located _BEFORE_ or _AFTER_\n   * the input element.\n   * @default \"after\"\n   */\n  buttonsAlign?: ButtonsAlignment;\n  /**\n   * Custom class name for the container in view mode.\n   */\n  viewContainerClassName?: string;\n  /**\n   * Custom class name for the container in edit mode.\n   * Will be set to viewContainerClassName if you set it and omit this.\n   */\n  editContainerClassName?: string;\n  /**\n   * Custom class name for the top-level main container.\n   */\n  mainContainerClassName?: string;\n  /**\n   * Set it to `true` if you want clicking on the view to activate the editor.\n   * @default false\n   */\n  editOnViewClick?: boolean;\n  /**\n   * Set it to `true` if you want the view state to be edit mode\n   * @default false\n   */\n  editing?: boolean;\n  /**\n   * Will be called when the editing mode is active.\n   *\n   * @param value the value of the input at the time when editing started.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onEditingStart?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Set it to `true` if you want to display action buttons **only**\n   * when the text hovered by the user.\n   * @default false\n   */\n  showButtonsOnHover?: boolean;\n  /**\n   * Set it to `true` if you want to submit the form when `Enter`\n   * is pressed.\n   * @default false\n   */\n  submitOnEnter?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when `Escape`\n   * is pressed.\n   * @default false\n   */\n  cancelOnEscape?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when the input\n   * is unfocused.\n   * @default false\n   */\n  cancelOnUnfocus?: boolean;\n  /**\n   * Set it to `true` if you want to save the form when the input\n   * is unfocused.\n   * @default false\n   */\n  submitOnUnfocus?: boolean;\n  /**\n   * An helper shortcut in case you want to pass the same tabIndex to both\n   * `viewProps` and `inputProps`.\n   *\n   * NOTE: This will be overriden if you pass the tabIndex in `viewProps`\n   * or `inputProps`.\n   */\n  tabIndex?: number;\n  /**\n   * Activates the edit mode when the view container is in focus.\n   */\n  startEditingOnFocus?: boolean;\n  /**\n   * Activates the edit mode when the `Enter` key is pressed if the view\n   * container is focused.\n   *\n   * NOTE: This requires the element to be in focus.\n   */\n  startEditingOnEnter?: boolean;\n  /**\n   * Custom render method for the content in the view mode.\n   * Use this prop to customize the displayed value in view mode.\n   * The return value from this function will be rendered in view mode.\n   * You can return string or JSX. Both are allowed.\n   */\n  renderValue?: (value: any) => any;\n}\n\nexport default function EdiText({\n  value,\n  type = 'text',\n  validationMessage = 'Invalid Value',\n  cancelButtonContent = '',\n  saveButtonContent = '',\n  editButtonContent = '',\n  buttonsAlign = 'after',\n  saveButtonClassName = '',\n  cancelButtonClassName = '',\n  editButtonClassName = '',\n  viewContainerClassName = '',\n  editContainerClassName = '',\n  mainContainerClassName = '',\n  ...props\n}: EdiTextProps) {\n  // state\n  const [editingInternal, setEditingInternal] = useState(props.editing);\n  const [valid, setValid] = useState<boolean>(true);\n  const [valueInternal, setValueInternal] = useState<string>(value || '');\n  const [savedValue, setSavedValue] = useState<string | undefined>(undefined);\n  const [viewFocused, setViewFocused] = useState<boolean>(false);\n  // refs\n  const saveButton = React.createRef<HTMLButtonElement>();\n  const editingContainer = React.createRef<HTMLDivElement>();\n  const editingButtons = React.createRef<any>();\n\n  useEffect(() => {\n    if (props.cancelOnUnfocus && props.submitOnUnfocus) {\n      console.warn(cancelOnConflictMessage);\n    }\n  }, [props.cancelOnUnfocus, props.submitOnUnfocus]);\n\n  useEffect(() => {\n    if (value !== undefined) {\n      setValueInternal(value);\n      setSavedValue(value);\n    }\n\n    if (props.editing !== undefined) {\n      setEditingInternal(props.editing);\n    }\n  }, [props.editing, value]);\n\n  function handleKeyDown(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const isEscape = [27, 'Escape', 'Esc'].some(\n      (c) => e.code === c || e.key === c\n    );\n    if (isEnter) {\n      props.submitOnEnter && handleSave();\n      e?.preventDefault();\n    }\n    if (isEscape) {\n      props.cancelOnEscape && handleCancel();\n      e.preventDefault();\n    }\n    props.inputProps?.onKeyDown && props.inputProps.onKeyDown(e);\n  }\n\n  function handleOnBlur(e: FocusEvent<any>): void {\n    const isEditingButton = editingButtons.current?.contains(e?.relatedTarget);\n    props.cancelOnUnfocus && !isEditingButton && handleCancel();\n    props.submitOnUnfocus &&\n      !isEditingButton &&\n      !props.cancelOnUnfocus &&\n      handleSave();\n    props.inputProps?.onBlur && props.inputProps.onBlur(e);\n  }\n\n  function handleViewFocus(e: FocusEvent<HTMLInputElement>): void {\n    setViewFocused(true);\n    props.startEditingOnFocus && setEditingInternal(true);\n    props.viewProps?.onFocus && props.viewProps.onFocus(e);\n  }\n\n  function handleKeyDownForView(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const startEditing = isEnter && viewFocused && props.startEditingOnEnter;\n    startEditing && e.preventDefault();\n    startEditing && setEditingInternal(true);\n    props.viewProps?.onKeyDown && props.viewProps.onKeyDown(e);\n  }\n\n  function handleInputChange(\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    setValid(true);\n    setValueInternal(e.target.value);\n  }\n\n  function handleCancel(): void {\n    const val = savedValue ?? value;\n    setValid(true);\n    setEditingInternal(false);\n    setValueInternal(val);\n    props.onCancel?.(val, props.inputProps);\n  }\n\n  function handleActivateEditMode(): void {\n    setEditingInternal(true);\n    props.onEditingStart?.(valueInternal, props.inputProps);\n  }\n\n  function handleSave(): void {\n    if (typeof props.validation === 'function') {\n      const isValid = props.validation(valueInternal);\n      if (!isValid) {\n        setValid(false);\n        props.onValidationFail && props.onValidationFail(valueInternal);\n        return;\n      }\n    }\n    setEditingInternal(false);\n    setSavedValue(valueInternal);\n    props.onSave(valueInternal, props.inputProps);\n  }\n\n  function _renderInput() {\n    if (type === 'textarea') {\n      return (\n        <textarea\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...(props.inputProps as React.DetailedHTMLProps<\n            React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n            HTMLTextAreaElement\n          >)}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    } else {\n      return (\n        <input\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...props.inputProps}\n          onKeyDown={handleKeyDown}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          type={type}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    }\n  }\n\n  function _renderEditingMode() {\n    const inputElem = _renderInput();\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const saveButtonClass = saveButtonClassName || saveButtonDefaultClasses;\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const cancelButtonClass =\n      cancelButtonClassName || cancelButtonDefaultClasses;\n    let editContainerClass = styles.Editext__editing_container;\n    if (editContainerClassName) editContainerClass = editContainerClassName;\n    if (viewContainerClassName) editContainerClass = viewContainerClassName;\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    return (\n      <div>\n        <div\n          ref={editingContainer}\n          className={editContainerClass}\n          // @ts-ignore\n          editext={dataAttributes.editContainer}\n        >\n          {buttonsAlign === 'after' && inputElem}\n          <div className={buttonsContainerClass} ref={editingButtons}>\n            <button\n              ref={saveButton}\n              // @ts-ignore\n              editext={dataAttributes.saveButton}\n              type=\"button\"\n              className={saveButtonClass}\n              onClick={handleSave}\n            >\n              {saveButtonContent}\n            </button>\n            <button\n              type=\"button\"\n              // @ts-ignore\n              editext={dataAttributes.cancelButton}\n              className={cancelButtonClass}\n              onClick={handleCancel}\n            >\n              {cancelButtonContent}\n            </button>\n          </div>\n          {buttonsAlign === 'before' && inputElem}\n        </div>\n        {!valid && !props.onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {validationMessage}\n          </div>\n        )}\n        {props.hint && (\n          <div\n            className={styles.Editext__hint}\n            // @ts-ignore\n            editext={dataAttributes.hint}\n          >\n            {props.hint}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function _renderViewMode() {\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const editButtonClass = editButtonClassName || editButtonDefaultClasses;\n    const viewContainerClass = classnames(\n      viewContainerClassName || styles.Editext__view_container,\n      props.showButtonsOnHover &&\n        `${styles.Editext__buttons_showButtonsOnHover}`\n    );\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    const viewClickHandler = props.editOnViewClick\n      ? handleActivateEditMode\n      : undefined;\n    const _value =\n      typeof props.renderValue === 'function'\n        ? props.renderValue(valueInternal)\n        : valueInternal;\n    return (\n      <div\n        className={viewContainerClass}\n        // @ts-ignore\n        editext={dataAttributes.viewContainer}\n      >\n        {buttonsAlign === 'after' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext=\"view\"\n          >\n            {_value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type=\"button\"\n            // @ts-ignore\n            editext={dataAttributes.editButton}\n            className={editButtonClass}\n            onClick={handleActivateEditMode}\n          >\n            {editButtonContent}\n          </button>\n        </div>\n        {buttonsAlign === 'before' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext={dataAttributes.viewContainer}\n          >\n            {_value}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const mode = editingInternal ? _renderEditingMode() : _renderViewMode();\n  const clsName = classnames(\n    mainContainerClassName || styles.Editext__main_container,\n    props.className\n  );\n  return <div className={clsName}>{mode}</div>;\n}\n"],"names":["classnames","_i","args","Array","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","dataAttributes","_a","value","_b","_c","validationMessage","_d","cancelButtonContent","_e","saveButtonContent","_f","editButtonContent","_g","buttonsAlign","_h","saveButtonClassName","_j","cancelButtonClassName","_k","editButtonClassName","_l","viewContainerClassName","_m","editContainerClassName","_o","mainContainerClassName","props","_p","useState","editing","editingInternal","setEditingInternal","_q","valid","setValid","_r","valueInternal","setValueInternal","_s","undefined","savedValue","setSavedValue","_t","viewFocused","setViewFocused","saveButton","React","createRef","editingContainer","editingButtons","handleKeyDown","e","isEnter","some","c","key","code","isEscape","submitOnEnter","handleSave","preventDefault","cancelOnEscape","handleCancel","inputProps","onKeyDown","handleOnBlur","isEditingButton","current","contains","relatedTarget","cancelOnUnfocus","submitOnUnfocus","onBlur","handleViewFocus","startEditingOnFocus","viewProps","onFocus","handleKeyDownForView","startEditing","startEditingOnEnter","handleInputChange","target","val","onCancel","handleActivateEditMode","onEditingStart","validation","onValidationFail","onSave","useEffect","console","warn","editButtonDefaultClasses","editButtonClass","viewContainerClass","buttonsContainerClass","viewClickHandler","_value","mode","inputElem","_jsx","className","styles","editext","tabIndex","onChange","autoFocus","saveButtonDefaultClasses","hideIcons","saveButtonClass","cancelButtonDefaultClasses","cancelButtonClass","editContainerClass","_jsxs","onClick","hint","_renderEditingMode","showButtonsOnHover","editOnViewClick","renderValue","clsName"],"mappings":"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"}