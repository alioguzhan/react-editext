{"version":3,"file":"index.es.js","sources":["../src/index.js","../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './styles.css'\n\nfunction classnames() {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n  */\n  return Array(...arguments).filter(a => a).join(' ')\n}\n\nconst _attrs = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint'\n}\n\nexport default class EdiText extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editing: props.editing,\n      valid: true,\n      value: props.value || '',\n      savedValue: ''\n    }\n    this.saveButton = React.createRef()\n    this.input = React.createRef()\n  }\n\n  componentDidUpdate(prevProps, _prevState) {\n    const nextState = {}\n    if (this.props.value !== undefined && prevProps.value !== this.props.value) {\n      nextState.value = this.props.value\n    }\n\n    if (\n      prevProps.editing !== undefined &&\n      prevProps.editing !== this.props.editing\n    ) {\n      nextState.editing = this.props.editing\n    }\n\n    if (Object.keys(nextState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(nextState)\n    }\n  }\n\n  handleKeyDown = e => {\n    const { submitOnEnter, inputProps, cancelOnEscape } = this.props\n    const isEnter = [13, 'Enter'].some(c => e.keyCode === c || e.code === c)\n    const isEscape = [27, 'Escape', 'Esc'].some(c => e.keyCode === c || e.code === c)\n    if (isEnter) {\n      submitOnEnter && this.handleSave()\n      e.preventDefault()\n    }\n    if (isEscape) {\n      cancelOnEscape && this.handleCancel()\n      e.preventDefault()\n    }\n    inputProps.onKeyDown && inputProps.onKeyDown(e) // TODO: this sucks.\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      valid: true,\n      value: e.target.value\n    })\n  }\n\n  handleCancel = () => {\n    this.setState(\n      {\n        valid: true,\n        editing: false,\n        value: this.state.savedValue || this.props.value\n      },\n      () => this.props.onCancel(this.state.value, this.props.inputProps)\n    )\n  }\n\n  handleActivateEditMode = () => {\n    this.setState({\n      editing: true\n    }, () => { this.props.onEditingStart(this.state.value) })\n  }\n\n  handleSave = () => {\n    const { onSave, validation, onValidationFail, inputProps } = this.props\n    const isValid = validation(this.state.value)\n    if (!isValid) {\n      return this.setState({ valid: false }, () => {\n        onValidationFail && onValidationFail(this.state.value)\n      })\n    }\n    this.setState(\n      {\n        editing: false,\n        savedValue: this.state.value\n      },\n      () => onSave(this.state.savedValue, inputProps)\n    )\n  }\n\n  _renderInput() {\n    if (this.props.type === 'textarea') {\n      return (\n        <textarea\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={_attrs.input}\n          {...this.props.inputProps}\n          value={this.state.value}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    } else {\n      return (\n        <input\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={_attrs.input}\n          {...this.props.inputProps}\n          onKeyDown={this.handleKeyDown}\n          value={this.state.value}\n          type={this.props.type}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    }\n  }\n\n  _renderEditingMode = () => {\n    const {\n      saveButtonClassName,\n      saveButtonContent,\n      cancelButtonClassName,\n      editContainerClassName,\n      viewContainerClassName,\n      cancelButtonContent,\n      onValidationFail,\n      validationMessage,\n      hint,\n      hideIcons,\n      buttonsAlign\n    } = this.props\n    const inputElem = this._renderInput()\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const saveButtonClass = saveButtonClassName || saveButtonDefaultClasses\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const cancelButtonClass =\n      cancelButtonClassName || cancelButtonDefaultClasses\n    let editContainerClass = styles.Editext__editing_container\n    if (editContainerClassName) editContainerClass = editContainerClassName\n    if (viewContainerClassName) editContainerClass = viewContainerClassName\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    return (\n      <div>\n        <div className={editContainerClass} editext={_attrs.editContainer}>\n          {buttonsAlign === 'after' && inputElem}\n          <div\n            className={buttonsContainerClass}\n          >\n            <button\n              ref={this.saveButton}\n              editext={_attrs.saveButton}\n              type='button'\n              className={saveButtonClass}\n              onClick={this.handleSave}\n            >\n              {saveButtonContent}\n            </button>\n            <button\n              type='button'\n              editext={_attrs.cancelButton}\n              className={cancelButtonClass}\n              onClick={this.handleCancel}\n            >\n              {cancelButtonContent}\n            </button>\n          </div>\n          {buttonsAlign === 'before' && inputElem}\n        </div>\n        {!this.state.valid && !onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {validationMessage}\n          </div>\n        )}\n        {hint &&\n          <div className={styles.Editext__hint} editext={_attrs.hint}>\n            {hint}\n          </div>}\n      </div>\n    )\n  }\n\n  _renderViewMode = () => {\n    const {\n      viewProps,\n      editButtonClassName,\n      editButtonContent,\n      viewContainerClassName,\n      hideIcons,\n      buttonsAlign,\n      editOnViewClick,\n      showButtonsOnHover\n    } = this.props\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const editButtonClass = editButtonClassName || editButtonDefaultClasses\n    const viewContainerClass = classnames(\n      viewContainerClassName || styles.Editext__view_container,\n      showButtonsOnHover && `${styles.Editext__buttons_showButtonsOnHover}`\n    )\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    const viewClickHandler = editOnViewClick\n      ? this.handleActivateEditMode\n      : undefined\n    return (\n      <div className={viewContainerClass} editext={_attrs.viewContainer}>\n        {buttonsAlign === 'after' && (\n          <div {...viewProps} onClick={viewClickHandler} editext='view'>\n            {this.state.value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type='button'\n            editext={_attrs.editButton}\n            className={editButtonClass}\n            onClick={this.handleActivateEditMode}\n          >\n            {editButtonContent}\n          </button>\n        </div>\n        {buttonsAlign === 'before' && (\n          <div {...viewProps} onClick={viewClickHandler} editext={_attrs.viewContainer}>\n            {this.state.value}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  render() {\n    const mode = this.state.editing\n      ? this._renderEditingMode()\n      : this._renderViewMode()\n    const { mainContainerClassName, className } = this.props\n    const clsName = classnames(\n      mainContainerClassName || styles.Editext__main_container, className\n    )\n    return <div className={clsName}>{mode}</div>\n  }\n}\n\nEdiText.defaultProps = {\n  value: '',\n  type: 'text',\n  validationMessage: 'Invalid Value',\n  validation: _v => true,\n  onEditingStart: _v => null,\n  onCancel: _v => null,\n  inputProps: { onKeyDown: _e => { } },\n  viewProps: {},\n  cancelButtonContent: '',\n  saveButtonContent: '',\n  editButtonContent: '',\n  hideIcons: false,\n  buttonsAlign: 'after',\n  editing: false\n}\n\nEdiText.propTypes = {\n  inputProps: PropTypes.object,\n  viewProps: PropTypes.object,\n  value: PropTypes.string.isRequired,\n  hint: PropTypes.node,\n  validationMessage: PropTypes.node,\n  validation: PropTypes.func,\n  onValidationFail: PropTypes.func,\n  type: PropTypes.oneOf([\n    'text',\n    'textarea',\n    'password',\n    'email',\n    'number',\n    'date',\n    'datetime-local',\n    'time',\n    'month',\n    'url',\n    'week',\n    'tel'\n  ]).isRequired,\n  // Events\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func.isRequired,\n  onEditingStart: PropTypes.func,\n  // classNames\n  className: PropTypes.string,\n  saveButtonClassName: PropTypes.string,\n  editButtonClassName: PropTypes.string,\n  cancelButtonClassName: PropTypes.string,\n  mainContainerClassName: PropTypes.string,\n  editContainerClassName: PropTypes.string,\n  viewContainerClassName: PropTypes.string,\n  // Custom Button Texts\n  cancelButtonContent: PropTypes.any,\n  saveButtonContent: PropTypes.any,\n  editButtonContent: PropTypes.any,\n  hideIcons: PropTypes.bool,\n  buttonsAlign: PropTypes.oneOf(['after', 'before']),\n  editOnViewClick: PropTypes.bool,\n  editing: PropTypes.bool,\n  showButtonsOnHover: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  cancelOnEscape: PropTypes.bool\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["classnames","Array","arguments","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","_attrs","EdiText","props","e","_this","submitOnEnter","inputProps","cancelOnEscape","isEnter","some","c","keyCode","code","isEscape","handleSave","preventDefault","handleCancel","onKeyDown","setState","valid","value","target","editing","state","savedValue","onCancel","onEditingStart","onSave","validation","onValidationFail","saveButtonClassName","saveButtonContent","cancelButtonClassName","editContainerClassName","viewContainerClassName","cancelButtonContent","validationMessage","hint","hideIcons","buttonsAlign","inputElem","_renderInput","saveButtonDefaultClasses","styles","saveButtonClass","cancelButtonDefaultClasses","cancelButtonClass","editContainerClass","buttonsContainerClass","React","className","editext","saveButton","onClick","viewProps","editButtonClassName","editButtonContent","editOnViewClick","showButtonsOnHover","editButtonDefaultClasses","editButtonClass","viewContainerClass","viewClickHandler","handleActivateEditMode","undefined","createRef","input","Component","prevProps","_prevState","nextState","this","Object","keys","length","onChange","handleInputChange","autoFocus","handleKeyDown","mode","_renderEditingMode","_renderViewMode","mainContainerClassName","clsName","defaultProps","_v","_e","propTypes","PropTypes","object","string","isRequired","node","func","oneOf","any","bool"],"mappings":"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"}