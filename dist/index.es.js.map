{"version":3,"file":"index.es.js","sources":["../src/utils.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/index.tsx"],"sourcesContent":["export function classnames(...args: any[]) {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n   */\n  return Array(...args)\n    .filter((a) => a)\n    .join(' ');\n}\n\nexport const dataAttributes = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint',\n};\n\nexport const cancelOnConflictMessage =\n  'EdiText: Both `cancelOnUnfocus` and `submitOnUnfocus` are set to true. ' +\n  '`submitOnUnfocus` is ignored in this case. Please remove one of these.';\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, {\n  useEffect,\n  KeyboardEvent,\n  FocusEvent,\n  useState,\n  ChangeEvent,\n} from 'react';\nimport styles from './styles.module.css';\nimport { cancelOnConflictMessage, dataAttributes, classnames } from './utils';\n\ntype EdiTextType =\n  | 'text'\n  | 'textarea'\n  | 'email'\n  | 'number'\n  | 'date'\n  | 'datetime-local'\n  | 'time'\n  | 'month'\n  | 'url'\n  | 'week'\n  | 'tel';\ntype ButtonsAlignment = 'after' | 'before';\n\ntype InputProps =\n  | React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >\n  | React.DetailedHTMLProps<\n      React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n      HTMLTextAreaElement\n    >;\ninterface EdiTextProps {\n  /**\n   * Props to be passed to input element.\n   * Any kind of valid DOM attributes are welcome\n   */\n  inputProps?: React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  /**\n   * Props to be passed to div element that shows the text.\n   * You can specify your own `styles` or `className`\n   */\n  viewProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Class name for the root container of the EdiText.\n   */\n  className?: string;\n  /**\n   * Value of the content [in view mode] and input [in edit mode]\n   */\n  value: string;\n  /**\n   * A simple hint message appears at the bottom of input element.\n   * Any valid element is allowed.\n   */\n  hint?: React.ReactNode;\n  /**\n        If validation fails this message will appear\n        */\n  validationMessage?: any;\n  /** Pass your own validation function.\n   * takes one param -> `value`.\n   * It must return `true` or `false`\n   */\n  validation?: (...args: string[]) => boolean;\n  /**\n   * will be called when validation fails.\n   * takes one param <value> which is the current value of input\n   */\n  onValidationFail?: (...args: string[]) => any;\n  /**\n   * Input type. Possible options are:\n   * `text`, `number`, `email`, `textarea`, `date`,\n   * `datetime-local`, `time`, `month`, `url`, `week`, `tel`\n   */\n  type?: EdiTextType;\n  /**\n   * will be called when user clicked cancel button\n   * @param value the current value of input when cancelled.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onCancel?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * will be called when user clicked save button.\n   * @param value the current value of input\n   * @param inputProps inputProps that passed to the element.\n   */\n  onSave: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Custom class name for SAVE button.\n   * */\n  saveButtonClassName?: string;\n  /**\n   * Custom class name for EDIT button.\n   * */\n  editButtonClassName?: string;\n  /**\n   * Custom class name for CANCEL button. */\n  cancelButtonClassName?: string;\n  /**\n   * Content for CANCEL button. Any valid element and node are allowed. */\n  cancelButtonContent?: any;\n  /**\n   * Content for SAVE button. Any valid element and node are allowed. */\n  saveButtonContent?: any;\n  /**\n   * Content for EDIT button. Any valid element and node are allowed. */\n  editButtonContent?: any;\n  /**\n   * Set it to `true` if you don't want to see default icons\n   * on action buttons.See Examples page for more details.\n   */\n  hideIcons?: boolean;\n  /**\n   * Decides whether buttons will be located _BEFORE_ or _AFTER_\n   * the input element. Default is `after`.\n   */\n  buttonsAlign?: ButtonsAlignment;\n  /**\n   * Custom class name for the container in view mode.\n   */\n  viewContainerClassName?: string;\n  /**\n   * Custom class name for the container in edit mode.\n   * Will be set to viewContainerClassName if you set it and omit this.\n   */\n  editContainerClassName?: string;\n  /**\n   * Custom class name for the top-level main container.\n   */\n  mainContainerClassName?: string;\n  /**\n   * Set it to `true` if you want clicking on the view to activate the editor.\n   */\n  editOnViewClick?: boolean;\n  /**\n   * Set it to `true` if you want the view state to be edit mode\n   */\n  editing?: boolean;\n  /**\n   * Will be called when the editing mode is active.\n   *\n   * @param value the value of the input at the time when editing started.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onEditingStart?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Set it to `true` if you want to display action buttons **only**\n   * when the text hovered by the user.\n   */\n  showButtonsOnHover?: boolean;\n  /**\n   * Set it to `true` if you want to submit the form when `Enter`\n   * is pressed.\n   */\n  submitOnEnter?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when `Escape`\n   * is pressed.\n   */\n  cancelOnEscape?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when the input\n   * is unfocused.\n   */\n  cancelOnUnfocus?: boolean;\n  /**\n   * Set it to `true` if you want to save the form when the input\n   * is unfocused.\n   */\n  submitOnUnfocus?: boolean;\n  /**\n   * An helper shortcut in case you want to pass the same tabIndex to both\n   * `viewProps` and `inputProps`.\n   *\n   * NOTE: This will be overriden if you pass the tabIndex in `viewProps`\n   * or `inputProps`.\n   */\n  tabIndex?: number;\n  /**\n   * Activates the edit mode when the view container is in focus.\n   */\n  startEditingOnFocus?: boolean;\n  /**\n   * Activates the edit mode when the `Enter` key is pressed if the view\n   * container is focused.\n   *\n   * NOTE: This requires the element to be in focus.\n   */\n  startEditingOnEnter?: boolean;\n  /**\n   * Custom render method for the content in the view mode.\n   * Use this prop to customize the displayed value in view mode.\n   * The return value from this function will be rendered in view mode.\n   * You can return string or JSX. Both are allowed.\n   */\n  renderValue?: (value: any) => any;\n}\n\nexport default function EdiText({\n  value = '',\n  type = 'text',\n  validationMessage = 'Invalid Value',\n  cancelButtonContent = '',\n  saveButtonContent = '',\n  editButtonContent = '',\n  hideIcons = false,\n  buttonsAlign = 'after',\n  editing = false,\n  saveButtonClassName = '',\n  cancelButtonClassName = '',\n  editButtonClassName = '',\n  viewContainerClassName = '',\n  editContainerClassName = '',\n  mainContainerClassName = '',\n  showButtonsOnHover = false,\n  cancelOnEscape,\n  cancelOnUnfocus,\n  submitOnUnfocus,\n  submitOnEnter,\n  startEditingOnEnter,\n  startEditingOnFocus,\n  tabIndex,\n  className,\n  hint,\n  editOnViewClick,\n  onSave,\n  renderValue,\n  validation = (_v: string) => true,\n  onValidationFail,\n  onEditingStart = (_v: unknown) => null,\n  onCancel = (_v: unknown) => null,\n  inputProps = {\n    onKeyDown: (_e: KeyboardEvent<HTMLInputElement>) => {},\n    onBlur: (_e: FocusEvent<HTMLInputElement>) => {},\n  },\n  viewProps = {\n    onKeyDown: (_e: KeyboardEvent<HTMLInputElement>) => {},\n    onFocus: (_e: FocusEvent<HTMLInputElement>) => {},\n  },\n}: EdiTextProps) {\n  // state\n  const [editingInternal, setEditingInternal] = useState(editing);\n  const [valid, setValid] = useState<Boolean>(true);\n  const [valueInternal, setValueInternal] = useState<string>(value || '');\n  const [savedValue, setSavedValue] = useState<string | undefined>(undefined);\n  const [viewFocused, setViewFocused] = useState<boolean>(false);\n  // refs\n  const saveButton = React.createRef<HTMLButtonElement>();\n  const editingContainer = React.createRef<HTMLDivElement>();\n  const editingButtons = React.createRef<any>();\n\n  useEffect(() => {\n    if (cancelOnUnfocus && submitOnUnfocus) {\n      console.warn(cancelOnConflictMessage);\n    }\n  }, [cancelOnUnfocus, submitOnUnfocus]);\n\n  useEffect(() => {\n    if (value !== undefined) {\n      setValueInternal(value);\n      setSavedValue(value);\n    }\n\n    if (editing !== undefined) {\n      setEditingInternal(editing);\n    }\n  }, [editing, value]);\n\n  function handleKeyDown(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some(\n      (c) => e?.keyCode === c || e?.code === c\n    );\n    const isEscape = [27, 'Escape', 'Esc'].some(\n      (c) => e?.keyCode === c || e.code === c\n    );\n    if (isEnter) {\n      submitOnEnter && handleSave();\n      e?.preventDefault();\n    }\n    if (isEscape) {\n      cancelOnEscape && handleCancel();\n      e.preventDefault();\n    }\n    inputProps?.onKeyDown && inputProps.onKeyDown(e); // TODO: this sucks.\n  }\n\n  function handleOnBlur(e: FocusEvent<any>): void {\n    const isEditingButton = editingButtons.current?.contains(e?.relatedTarget);\n    cancelOnUnfocus && !isEditingButton && handleCancel();\n    submitOnUnfocus && !isEditingButton && !cancelOnUnfocus && handleSave();\n    inputProps?.onBlur && inputProps.onBlur(e); // TODO: this sucks.\n  }\n\n  function handleViewFocus(e: FocusEvent<HTMLInputElement>): void {\n    setViewFocused(true);\n    startEditingOnFocus && setEditingInternal(true);\n    viewProps?.onFocus && viewProps.onFocus(e);\n  }\n\n  function handleKeyDownForView(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.keyCode === c || e.code === c);\n    const startEditing = isEnter && viewFocused && startEditingOnEnter;\n    startEditing && e.preventDefault();\n    startEditing && setEditingInternal(true);\n    viewProps?.onKeyDown && viewProps.onKeyDown(e);\n  }\n\n  function handleInputChange(\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    setValid(true);\n    setValueInternal(e.target.value);\n  }\n\n  function handleCancel(): void {\n    const val = savedValue ?? value;\n    setValid(true);\n    setEditingInternal(false);\n    setValueInternal(val);\n    onCancel?.(val, inputProps);\n  }\n\n  function handleActivateEditMode(): void {\n    setEditingInternal(true);\n    onEditingStart?.(valueInternal, inputProps);\n  }\n\n  function handleSave(): void {\n    const isValid = validation(valueInternal);\n    if (!isValid) {\n      setValid(false);\n      onValidationFail && onValidationFail(valueInternal);\n      return;\n    }\n    setEditingInternal(false);\n    setSavedValue(valueInternal);\n    onSave(valueInternal, inputProps);\n  }\n\n  function _renderInput() {\n    if (type === 'textarea') {\n      return (\n        <textarea\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={tabIndex}\n          {...(inputProps as React.DetailedHTMLProps<\n            React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n            HTMLTextAreaElement\n          >)}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    } else {\n      return (\n        <input\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={tabIndex}\n          {...inputProps}\n          onKeyDown={handleKeyDown}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          type={type}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    }\n  }\n\n  function _renderEditingMode() {\n    const inputElem = _renderInput();\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const saveButtonClass = saveButtonClassName || saveButtonDefaultClasses;\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const cancelButtonClass =\n      cancelButtonClassName || cancelButtonDefaultClasses;\n    let editContainerClass = styles.Editext__editing_container;\n    if (editContainerClassName) editContainerClass = editContainerClassName;\n    if (viewContainerClassName) editContainerClass = viewContainerClassName;\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    return (\n      <div>\n        <div\n          ref={editingContainer}\n          className={editContainerClass}\n          // @ts-ignore\n          editext={dataAttributes.editContainer}\n        >\n          {buttonsAlign === 'after' && inputElem}\n          <div className={buttonsContainerClass} ref={editingButtons}>\n            <button\n              ref={saveButton}\n              // @ts-ignore\n              editext={dataAttributes.saveButton}\n              type=\"button\"\n              className={saveButtonClass}\n              onClick={handleSave}\n            >\n              {saveButtonContent}\n            </button>\n            <button\n              type=\"button\"\n              // @ts-ignore\n              editext={dataAttributes.cancelButton}\n              className={cancelButtonClass}\n              onClick={handleCancel}\n            >\n              {cancelButtonContent}\n            </button>\n          </div>\n          {buttonsAlign === 'before' && inputElem}\n        </div>\n        {!valid && !onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {validationMessage}\n          </div>\n        )}\n        {hint && (\n          <div\n            className={styles.Editext__hint}\n            // @ts-ignore\n            editext={dataAttributes.hint}\n          >\n            {hint}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function _renderViewMode() {\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const editButtonClass = editButtonClassName || editButtonDefaultClasses;\n    const viewContainerClass = classnames(\n      viewContainerClassName || styles.Editext__view_container,\n      showButtonsOnHover && `${styles.Editext__buttons_showButtonsOnHover}`\n    );\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    const viewClickHandler = editOnViewClick\n      ? handleActivateEditMode\n      : undefined;\n    const _value =\n      typeof renderValue === 'function'\n        ? renderValue(valueInternal)\n        : valueInternal;\n    return (\n      <div\n        className={viewContainerClass}\n        // @ts-ignore\n        editext={dataAttributes.viewContainer}\n      >\n        {buttonsAlign === 'after' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={tabIndex}\n            {...viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext=\"view\"\n          >\n            {_value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type=\"button\"\n            // @ts-ignore\n            editext={dataAttributes.editButton}\n            className={editButtonClass}\n            onClick={handleActivateEditMode}\n          >\n            {editButtonContent}\n          </button>\n        </div>\n        {buttonsAlign === 'before' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={tabIndex}\n            {...viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext={dataAttributes.viewContainer}\n          >\n            {_value}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const mode = editingInternal ? _renderEditingMode() : _renderViewMode();\n  const clsName = classnames(\n    mainContainerClassName || styles.Editext__main_container,\n    className\n  );\n  return <div className={clsName}>{mode}</div>;\n}\n"],"names":["classnames","_i","args","Array","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","dataAttributes","EdiText","_a","_b","value","_c","_d","validationMessage","_f","cancelButtonContent","_g","saveButtonContent","_h","editButtonContent","_j","hideIcons","_k","buttonsAlign","_l","editing","_m","saveButtonClassName","_o","cancelButtonClassName","_p","editButtonClassName","_q","viewContainerClassName","_r","editContainerClassName","_s","mainContainerClassName","_t","showButtonsOnHover","cancelOnEscape","cancelOnUnfocus","submitOnUnfocus","submitOnEnter","startEditingOnEnter","startEditingOnFocus","tabIndex","className","hint","editOnViewClick","onSave","renderValue","_u","validation","_v","onValidationFail","_w","onEditingStart","_x","onCancel","_y","inputProps","onKeyDown","_e","onBlur","_z","viewProps","onFocus","_0","__read","useState","editingInternal","setEditingInternal","_1","valid","setValid","_2","valueInternal","setValueInternal","_3","undefined","savedValue","setSavedValue","_4","viewFocused","setViewFocused","saveButton","React","createRef","editingContainer","editingButtons","handleKeyDown","e","isEnter","some","c","keyCode","code","isEscape","handleSave","preventDefault","handleCancel","handleOnBlur","isEditingButton","current","contains","relatedTarget","handleViewFocus","handleKeyDownForView","startEditing","handleInputChange","target","val","handleActivateEditMode","useEffect","console","warn","editButtonDefaultClasses","editButtonClass","viewContainerClass","buttonsContainerClass","viewClickHandler","_value","mode","inputElem","_jsx","styles","editext","onChange","autoFocus","saveButtonDefaultClasses","saveButtonClass","cancelButtonDefaultClasses","cancelButtonClass","editContainerClass","_jsxs","onClick","_renderEditingMode","clsName"],"mappings":";;;;;;;;;;;;;;g4CAAgBA,QAAW,aAAAC,mBAAAA,IAAAC,kBAKzB,OAAOC,0BAASD,KACbE,QAAO,SAACC,GAAM,OAAAA,KACdC,KAAK,MCPV,SAAqBC,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,kuEDbvC,IAAMe,EAuBI,iBAvBJA,EAyBI,iBAzBJA,EA0BC,cA1BDA,EA2BC,cA3BDA,EA4BG,gBA5BHA,EA6BJ,QA7BIA,EA8BL,gBEsKgBC,EAAQC,OAC9BC,UAAAC,aAAQ,KACRC,SAAAZ,aAAO,SACPa,sBAAAC,aAAoB,kBACpBC,wBAAAC,aAAsB,KACtBC,sBAAAC,aAAoB,KACpBC,sBAAAC,aAAoB,KACpBC,cAAAC,gBACAC,iBAAAC,aAAe,UACfC,YAAAC,gBACAC,wBAAAC,aAAsB,KACtBC,0BAAAC,aAAwB,KACxBC,wBAAAC,cAAsB,KACtBC,4BAAAC,eAAyB,MACzBC,4BAAAC,eAAyB,MACzBC,4BAAAC,eAAyB,MACzBC,wBAAAC,mBACAC,oBACAC,qBACAC,qBACAC,mBACAC,yBACAC,yBACAC,cACAC,eACAC,UACAC,qBACAC,YACAC,iBACAC,gBAAAC,eAAa,SAACC,GAAe,OAAA,MAC7BC,sBACAC,oBAAAC,eAAiB,SAACH,GAAgB,OAAA,SAClCI,cAAAC,eAAW,SAACL,GAAgB,OAAA,SAC5BM,gBAAAC,eAAa,CACXC,UAAW,SAACC,KACZC,OAAQ,SAACD,SAEXE,eAAAC,eAAY,CACVJ,UAAW,SAACC,KACZI,QAAS,SAACJ,SAINK,GAAAC,EAAwCC,EAAS7C,MAAhD8C,SAAiBC,SAClBC,GAAAJ,EAAoBC,GAAkB,MAArCI,SAAOC,SACRC,GAAAP,EAAoCC,EAAiB5D,GAAS,OAA7DmE,SAAeC,SAChBC,GAAAV,EAA8BC,OAA6BU,MAA1DC,SAAYC,SACbC,GAAAd,EAAgCC,GAAkB,MAAjDc,SAAaC,SAEdC,GAAaC,EAAMC,YACnBC,GAAmBF,EAAMC,YACzBE,GAAiBH,EAAMC,YAmB7B,SAASG,GAAcC,GACrB,IAAMC,EAAU,CAAC,GAAI,SAASC,MAC5B,SAACC,GAAM,OAAAH,MAAAA,SAAAA,EAAGI,WAAYD,IAAKH,MAAAA,SAAAA,EAAGK,QAASF,KAEnCG,EAAW,CAAC,GAAI,SAAU,OAAOJ,MACrC,SAACC,GAAM,OAAAH,MAAAA,SAAAA,EAAGI,WAAYD,GAAKH,EAAEK,OAASF,KAEpCF,IACFlD,IAAiBwD,KACjBP,MAAAA,GAAAA,EAAGQ,kBAEDF,IACF1D,IAAkB6D,KAClBT,EAAEQ,mBAEJvC,MAAAA,UAAAA,GAAYC,YAAaD,GAAWC,UAAU8B,GAGhD,SAASU,GAAaV,SACdW,YAAkBb,GAAec,8BAASC,SAASb,MAAAA,SAAAA,EAAGc,eAC5DjE,KAAoB8D,GAAmBF,KACvC3D,KAAoB6D,IAAoB9D,IAAmB0D,MAC3DtC,MAAAA,UAAAA,GAAYG,SAAUH,GAAWG,OAAO4B,GAG1C,SAASe,GAAgBf,GACvBP,IAAe,GACfxC,IAAuB2B,IAAmB,IAC1CN,MAAAA,UAAAA,GAAWC,UAAWD,GAAUC,QAAQyB,GAG1C,SAASgB,GAAqBhB,GAC5B,IACMiB,EADU,CAAC,GAAI,SAASf,MAAK,SAACC,GAAM,OAAAH,EAAEI,UAAYD,GAAKH,EAAEK,OAASF,MACxCX,IAAexC,GAC/CiE,GAAgBjB,EAAEQ,iBAClBS,GAAgBrC,IAAmB,IACnCN,MAAAA,UAAAA,GAAWJ,YAAaI,GAAUJ,UAAU8B,GAG9C,SAASkB,GACPlB,GAEAjB,IAAS,GACTG,GAAiBc,EAAEmB,OAAOrG,OAG5B,SAAS2F,KACP,IAAMW,EAAM/B,MAAAA,GAAAA,GAAcvE,EAC1BiE,IAAS,GACTH,IAAmB,GACnBM,GAAiBkC,GACjBrD,MAAAA,IAAAA,GAAWqD,EAAKnD,IAGlB,SAASoD,KACPzC,IAAmB,GACnBf,MAAAA,IAAAA,GAAiBoB,GAAehB,IAGlC,SAASsC,KAEP,IADgB9C,GAAWwB,IAIzB,OAFAF,IAAS,QACTpB,IAAoBA,GAAiBsB,KAGvCL,IAAmB,GACnBU,GAAcL,IACd3B,GAAO2B,GAAehB,IArFxBqD,GAAU,WACJzE,IAAmBC,IACrByE,QAAQC,KFzNZ,mJE2NG,CAAC3E,GAAiBC,KAErBwE,GAAU,gBACMlC,IAAVtE,IACFoE,GAAiBpE,GACjBwE,GAAcxE,SAGAsE,IAAZvD,GACF+C,GAAmB/C,KAEpB,CAACA,EAASf,IA4Qb,IA3EQ2G,GAKAC,GACAC,GAIAC,GAKAC,GAGAC,GAyDFC,GAAOpD,GAxJb,WACE,IAAMqD,EA3CO,aAAT7H,EAEA8H,gBACE9E,UAAW+E,EAEXC,QAASzH,EAITwC,SAAUA,IACLe,IAILG,OAAQsC,GACR5F,MAAOmE,GACPmD,SAAUlB,GACVmB,UAAW1D,aAKbsD,aACE9E,UAAW+E,EAEXC,QAASzH,EAITwC,SAAUA,IACNe,IACJC,UAAW6B,GACX3B,OAAQsC,GACR5F,MAAOmE,GACP9E,KAAMA,EACNiI,SAAUlB,GACVmB,UAAW1D,aASX2D,EAA2BlJ,EAC/B,GAAG8I,EACH,GAAGA,EACHzG,GAAa,GAAGyG,GAEZK,EAAkBxG,GAAuBuG,EAEzCE,EAA6BpJ,EACjC,GAAG8I,EACH,GAAGA,EACHzG,GAAa,GAAGyG,GAEZO,EACJxG,GAAyBuG,EACvBE,EAAqBR,EACrB3F,KAAwBmG,EAAqBnG,IAC7CF,KAAwBqG,EAAqBrG,IACjD,IAAMuF,EAAwBxI,EAC5B8I,EACiB,WAAjBvG,GAA6B,GAAGuG,EACf,UAAjBvG,GAA4B,GAAGuG,GAEjC,OACES,mBACEA,WACE/I,IAAKiG,GACL1C,UAAWuF,EAEXP,QAASzH,cAES,UAAjBiB,GAA4BqG,EAC7BW,WAAKxF,UAAWyE,EAAuBhI,IAAKkG,eAC1CmC,cACErI,IAAK8F,GAELyC,QAASzH,EACTP,KAAK,SACLgD,UAAWoF,EACXK,QAASrC,cAERlF,YAEH4G,cACE9H,KAAK,SAELgI,QAASzH,EACTyC,UAAWsF,EACXG,QAASnC,cAERtF,uBAGa,WAAjBQ,GAA6BqG,cAE9BlD,KAAUnB,IACVsE,WAAK9E,UAAW+E,aACbjH,YAGJmC,IACC6E,WACE9E,UAAW+E,EAEXC,QAASzH,aAER0C,uBAoFoByF,IA3EvBpB,GAA2BrI,EAC/B,GAAG8I,EACH,GAAGA,EACHzG,GAAa,GAAGyG,GAEZR,GAAkBvF,IAAuBsF,GACzCE,GAAqBvI,EACzBiD,IAA0B6F,EAC1BvF,IAAsB,GAAGuF,GAErBN,GAAwBxI,EAC5B8I,EACiB,WAAjBvG,GAA6B,GAAGuG,EACf,UAAjBvG,GAA4B,GAAGuG,GAE3BL,GAAmBxE,GACrBgE,QACAjC,EACE0C,GACmB,mBAAhBvE,GACHA,GAAY0B,IACZA,GAEJ0D,WACExF,UAAWwE,GAEXQ,QAASzH,cAES,UAAjBiB,GACCsG,WAIE/E,SAAUA,IACNoB,IACJJ,UAAW8C,GACXzC,QAASwC,GACT6B,QAASf,GAETM,QAAQ,kBAEPL,aAGLG,WAAK9E,UAAWyE,cACdK,cACE9H,KAAK,SAELgI,QAASzH,EACTyC,UAAWuE,GACXkB,QAASvB,cAER9F,sBAGa,WAAjBI,GACCsG,WAIE/E,SAAUA,IACNoB,IACJJ,UAAW8C,GACXzC,QAASwC,GACT6B,QAASf,GAETM,QAASzH,aAERoH,yBAQLgB,GAAU1J,EACdqD,IAA0ByF,EAC1B/E,IAEF,OAAO8E,WAAK9E,UAAW2F,cAAUf"}