{"version":3,"file":"index.es.js","sources":["../src/utils.js","../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["export function classnames() {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n   */\n  return Array(...arguments)\n    .filter(a => a)\n    .join(' ')\n}\n\nexport const dataAttributes = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint'\n}\n\nexport const cancelOnConflictMessage =\n  'EdiText: Both `cancelOnUnfocus` and `submitOnUnfocus` are set to true. ' +\n  '`submitOnUnfocus` is ignored in this case. Please remove one of these.'\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './styles.css'\nimport { cancelOnConflictMessage, dataAttributes, classnames } from './utils'\n\nexport default class EdiText extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editing: props.editing,\n      valid: true,\n      value: props.value || '',\n      savedValue: ''\n    }\n    this.saveButton = React.createRef()\n    this.input = React.createRef()\n    this.editingContainer = React.createRef()\n    this.editingButtons = React.createRef()\n  }\n\n  componentDidMount() {\n    this.checkPropsConsistency()\n  }\n\n  checkPropsConsistency() {\n    if (this.props.cancelOnUnfocus && this.props.submitOnUnfocus) {\n      console.warn(cancelOnConflictMessage)\n    }\n  }\n\n  componentDidUpdate(prevProps, _prevState) {\n    const nextState = {}\n    if (\n      this.props.value !== undefined &&\n      prevProps.value !== this.props.value\n    ) {\n      nextState.value = this.props.value\n    }\n\n    if (\n      prevProps.editing !== undefined &&\n      prevProps.editing !== this.props.editing\n    ) {\n      nextState.editing = this.props.editing\n    }\n\n    if (Object.keys(nextState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(nextState)\n    }\n  }\n\n  handleKeyDown = e => {\n    const { submitOnEnter, inputProps, cancelOnEscape } = this.props\n    const isEnter = [13, 'Enter'].some(c => e.keyCode === c || e.code === c)\n    const isEscape = [27, 'Escape', 'Esc'].some(\n      c => e.keyCode === c || e.code === c\n    )\n    if (isEnter) {\n      submitOnEnter && this.handleSave()\n      e.preventDefault()\n    }\n    if (isEscape) {\n      cancelOnEscape && this.handleCancel()\n      e.preventDefault()\n    }\n    inputProps.onKeyDown && inputProps.onKeyDown(e) // TODO: this sucks.\n  }\n\n  handleOnBlur = e => {\n    const { cancelOnUnfocus, submitOnUnfocus, inputProps } = this.props\n    const isEditingButton = this.editingButtons.current.contains(\n      e.relatedTarget\n    )\n    cancelOnUnfocus && !isEditingButton && this.handleCancel()\n    submitOnUnfocus && !isEditingButton && !cancelOnUnfocus && this.handleSave()\n    inputProps.onBlur && inputProps.onBlur(e) // TODO: this sucks.\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      valid: true,\n      value: e.target.value\n    })\n  }\n\n  handleCancel = () => {\n    this.setState(\n      {\n        valid: true,\n        editing: false,\n        value: this.state.savedValue || this.props.value\n      },\n      () => this.props.onCancel(this.state.value, this.props.inputProps)\n    )\n  }\n\n  handleActivateEditMode = () => {\n    this.setState(\n      {\n        editing: true\n      },\n      () => {\n        this.props.onEditingStart(this.state.value)\n      }\n    )\n  }\n\n  handleSave = () => {\n    const { onSave, validation, onValidationFail, inputProps } = this.props\n    const isValid = validation(this.state.value)\n    if (!isValid) {\n      return this.setState({ valid: false }, () => {\n        onValidationFail && onValidationFail(this.state.value)\n      })\n    }\n    this.setState(\n      {\n        editing: false,\n        savedValue: this.state.value\n      },\n      () => onSave(this.state.savedValue, inputProps)\n    )\n  }\n\n  _renderInput() {\n    if (this.props.type === 'textarea') {\n      return (\n        <textarea\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={dataAttributes.input}\n          {...this.props.inputProps}\n          onBlur={this.handleOnBlur}\n          value={this.state.value}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    } else {\n      return (\n        <input\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={dataAttributes.input}\n          {...this.props.inputProps}\n          onKeyDown={this.handleKeyDown}\n          onBlur={this.handleOnBlur}\n          value={this.state.value}\n          type={this.props.type}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    }\n  }\n\n  _renderEditingMode = () => {\n    const {\n      saveButtonClassName,\n      saveButtonContent,\n      cancelButtonClassName,\n      editContainerClassName,\n      viewContainerClassName,\n      cancelButtonContent,\n      onValidationFail,\n      validationMessage,\n      hint,\n      hideIcons,\n      buttonsAlign\n    } = this.props\n    const inputElem = this._renderInput()\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const saveButtonClass = saveButtonClassName || saveButtonDefaultClasses\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const cancelButtonClass =\n      cancelButtonClassName || cancelButtonDefaultClasses\n    let editContainerClass = styles.Editext__editing_container\n    if (editContainerClassName) editContainerClass = editContainerClassName\n    if (viewContainerClassName) editContainerClass = viewContainerClassName\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    return (\n      <div>\n        <div\n          ref={this.editingContainer}\n          className={editContainerClass}\n          editext={dataAttributes.editContainer}\n        >\n          {buttonsAlign === 'after' && inputElem}\n          <div className={buttonsContainerClass} ref={this.editingButtons}>\n            <button\n              ref={this.saveButton}\n              editext={dataAttributes.saveButton}\n              type='button'\n              className={saveButtonClass}\n              onClick={this.handleSave}\n            >\n              {saveButtonContent}\n            </button>\n            <button\n              type='button'\n              editext={dataAttributes.cancelButton}\n              className={cancelButtonClass}\n              onClick={this.handleCancel}\n            >\n              {cancelButtonContent}\n            </button>\n          </div>\n          {buttonsAlign === 'before' && inputElem}\n        </div>\n        {!this.state.valid && !onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {validationMessage}\n          </div>\n        )}\n        {hint && (\n          <div className={styles.Editext__hint} editext={dataAttributes.hint}>\n            {hint}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  _renderViewMode = () => {\n    const {\n      viewProps,\n      editButtonClassName,\n      editButtonContent,\n      viewContainerClassName,\n      hideIcons,\n      buttonsAlign,\n      editOnViewClick,\n      showButtonsOnHover\n    } = this.props\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const editButtonClass = editButtonClassName || editButtonDefaultClasses\n    const viewContainerClass = classnames(\n      viewContainerClassName || styles.Editext__view_container,\n      showButtonsOnHover && `${styles.Editext__buttons_showButtonsOnHover}`\n    )\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    const viewClickHandler = editOnViewClick\n      ? this.handleActivateEditMode\n      : undefined\n    return (\n      <div\n        className={viewContainerClass}\n        editext={dataAttributes.viewContainer}\n      >\n        {buttonsAlign === 'after' && (\n          <div {...viewProps} onClick={viewClickHandler} editext='view'>\n            {this.state.value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type='button'\n            editext={dataAttributes.editButton}\n            className={editButtonClass}\n            onClick={this.handleActivateEditMode}\n          >\n            {editButtonContent}\n          </button>\n        </div>\n        {buttonsAlign === 'before' && (\n          <div\n            {...viewProps}\n            onClick={viewClickHandler}\n            editext={dataAttributes.viewContainer}\n          >\n            {this.state.value}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  render() {\n    const mode = this.state.editing\n      ? this._renderEditingMode()\n      : this._renderViewMode()\n    const { mainContainerClassName, className } = this.props\n    const clsName = classnames(\n      mainContainerClassName || styles.Editext__main_container,\n      className\n    )\n    return <div className={clsName}>{mode}</div>\n  }\n}\n\nEdiText.defaultProps = {\n  value: '',\n  type: 'text',\n  validationMessage: 'Invalid Value',\n  validation: _v => true,\n  onEditingStart: _v => null,\n  onCancel: _v => null,\n  inputProps: { onKeyDown: _e => {}, onBlur: _e => {} },\n  viewProps: {},\n  cancelButtonContent: '',\n  saveButtonContent: '',\n  editButtonContent: '',\n  hideIcons: false,\n  buttonsAlign: 'after',\n  editing: false\n}\n\nEdiText.propTypes = {\n  inputProps: PropTypes.object,\n  viewProps: PropTypes.object,\n  value: PropTypes.string.isRequired,\n  hint: PropTypes.node,\n  validationMessage: PropTypes.node,\n  validation: PropTypes.func,\n  onValidationFail: PropTypes.func,\n  type: PropTypes.oneOf([\n    'text',\n    'textarea',\n    'password',\n    'email',\n    'number',\n    'date',\n    'datetime-local',\n    'time',\n    'month',\n    'url',\n    'week',\n    'tel'\n  ]).isRequired,\n  // Events\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func.isRequired,\n  onEditingStart: PropTypes.func,\n  // classNames\n  className: PropTypes.string,\n  saveButtonClassName: PropTypes.string,\n  editButtonClassName: PropTypes.string,\n  cancelButtonClassName: PropTypes.string,\n  mainContainerClassName: PropTypes.string,\n  editContainerClassName: PropTypes.string,\n  viewContainerClassName: PropTypes.string,\n  // Custom Button Texts\n  cancelButtonContent: PropTypes.any,\n  saveButtonContent: PropTypes.any,\n  editButtonContent: PropTypes.any,\n  hideIcons: PropTypes.bool,\n  buttonsAlign: PropTypes.oneOf(['after', 'before']),\n  editOnViewClick: PropTypes.bool,\n  editing: PropTypes.bool,\n  showButtonsOnHover: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  cancelOnEscape: PropTypes.bool,\n  cancelOnUnfocus: PropTypes.bool,\n  submitOnUnfocus: PropTypes.bool\n}\n"],"names":["classnames","Array","arguments","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","dataAttributes","EdiText","Component","props","e","_this","submitOnEnter","inputProps","cancelOnEscape","isEnter","some","c","keyCode","code","isEscape","handleSave","preventDefault","handleCancel","onKeyDown","cancelOnUnfocus","submitOnUnfocus","isEditingButton","editingButtons","current","contains","relatedTarget","onBlur","setState","valid","value","target","editing","state","savedValue","onCancel","onEditingStart","onSave","validation","onValidationFail","saveButtonClassName","saveButtonContent","cancelButtonClassName","editContainerClassName","viewContainerClassName","cancelButtonContent","validationMessage","hint","hideIcons","buttonsAlign","inputElem","_renderInput","saveButtonDefaultClasses","styles","saveButtonClass","cancelButtonDefaultClasses","cancelButtonClass","editContainerClass","buttonsContainerClass","React","editingContainer","className","editext","saveButton","onClick","viewProps","editButtonClassName","editButtonContent","editOnViewClick","showButtonsOnHover","editButtonDefaultClasses","editButtonClass","viewContainerClass","viewClickHandler","handleActivateEditMode","undefined","createRef","input","checkPropsConsistency","this","console","warn","prevProps","_prevState","nextState","Object","keys","length","handleOnBlur","onChange","handleInputChange","autoFocus","handleKeyDown","mode","_renderEditingMode","_renderViewMode","mainContainerClassName","clsName","defaultProps","_v","_e","propTypes","PropTypes","object","string","isRequired","node","func","oneOf","any","bool"],"mappings":"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"}